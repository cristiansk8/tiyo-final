// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String         @id @default(uuid())
  name       String?
  email      String         @unique
  phone      String?
  photo      String?
  plan       Plan           @default(Basic)
  facebook   String?
  instagram  String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  qrCodes    QRCode[]
  categories UserCategory[]
}

model QRCode {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scanCount   Int      @default(0)
  content     String?
  qrImage     String?
  hash        String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  scans       Scan[]
}

model Scan {
  id        String   @id @default(uuid())
  scannedAt DateTime @default(now())
  ip        String?
  location  String?
  qrCodeId  String
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id])
}

model Category {
  id     Int            @id @default(autoincrement())
  name   String
  slug   String         @unique
  active Boolean        @default(true)
  users  UserCategory[]
}

model UserCategory {
  userId     String
  categoryId Int
  selected   Boolean  @default(true)
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, categoryId])
  @@map("user_categories")
}

enum Plan {
  Basic
  Pro
  Enterprise
}
